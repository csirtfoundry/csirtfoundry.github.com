---
layout: article
title:  It's hard to go past HTML visualizations 

categories:
 - blog

author: Chris Horsley
---
Rethinking your visualizations in HTML

So, <a href="vis-purpose.html">we’ve looked at what a good visualization should do</a>. Next: the how. What type of visualization technologies should we use?

In this article, I’m going to convince you that learning how to put together a HTML + JavaScript data visualization is well worth your time.

Before we get there, let’s talk about what type of visualization we want. We want it to be deep and operational: not style without substance (a.k.a. management porn) or a lightly educational infographic that would appear in The USA Today. We want something we are going to look at and gain new operational insight from every day.

Like the beginning of any project, let's start with some requirements for our visualization:

- **Automation**: we should be able to generate and update our visualization automatically. This might be via cron, or via a realtime feed of data. The rule is: if it requires any manual effort to run or refresh the visualization, it’s doomed.

- **Repeatability**: we should be able to take new data, run it through the same algorithm, and get a new visualization. Laziness is a perversely good motivator.

- **Accessibility**: our visualization should be ideally be accessible to anyone without the need for special plugins. Especially when we’re dealing with secure environments, our viewers often don’t have the ability to add any software over the stock OS install.

- **Interactive**: a fancy term, but this can be as simple as allowing clicks to dig further into information. This is essential for deep understanding of the data presented. For example: what’s the IP address represented by that big, red point?

- **Animation capable**: certain types of visualizations - not all of them - can benefit greatly from appropriate animations. As well as showing an effect over time, it’s a great way to show the effect of filters while allowing the viewer to see the transition take effect.

D3 animated treemap

Though it’s not a requirement for everyone, for our explorational purposes, I’m only going to consider tools that are free or low cost.

When it comes to the “how” of visualization, we’ve got multitudes of tools available to us. Here’s a shortlist:

##Static images generated by command line tools##

One very popular tool among many here is Graphviz, which outputs static images along with more dynamic formats such as SVG. Here's some output from another tool called Circos, neat for displaying 2D tables:

<p><img src="/img/blog/2011-07-13-vis-which-tech/circos.png" /></p>

Summary:

<p><img src="/img/blog/2011-07-13-vis-which-tech/star_on.png" class="inl_icon"/> Automation: brilliantly cron-able.<br/>
<img src="/img/blog/2011-07-13-vis-which-tech/star_on.png" class="inl_icon"/> Repeatability: after massaging our data to the correct format, we can run it many times.</br>
<img src="/img/blog/2011-07-13-vis-which-tech/star_on.png" class="inl_icon"/> Accessibility: top marks, given that we can view static image files on just about any device you’d want to name. They’re also easy to email and post up to the web.<br/>  
<img src="/img/blog/2011-07-13-vis-which-tech/star_off.png" class="inl_icon"/> Interactivity: being static, very little. We can add the static image to a web page and add links and imagemaps to give it some interactivity, but this really becomes a HTML visualization at that point.</br>
<img src="/img/blog/2011-07-13-vis-which-tech/star_half.png" class="inl_icon"/> Animation: some graphic formats give us simple animations, but they're fairly limited.<br/>
</p>

##Desktop tools## 

Desktop tools can let us put together some sophisticated visualisations, make hand-crafted changes, and assist with data import. There's many tools like this, one of which is Gephi;

<p><img src="/img/blog/2011-07-13-vis-which-tech/genphi.png" /></p>

Summary:

<p><img src="/img/blog/2011-07-13-vis-which-tech/star_off.png" class="inl_icon"/> Automation: some desktop tools may have a command line interface - but for the desktop component itself, low marks for automation.<br/>
<img src="/img/blog/2011-07-13-vis-which-tech/star_on.png" class="inl_icon"/> Repeatability: yes, many have algorithmic means of turning a data feed into a visualization.</br>
<img src="/img/blog/2011-07-13-vis-which-tech/star_half.png" class="inl_icon"/> Accessibility: depends on the output format. A format like PNG is very accessible, but a propietary format may need a special viewer - including Excel spreadsheets.<br/>  
<img src="/img/blog/2011-07-13-vis-which-tech/star_on.png" class="inl_icon"/> Interactivity: once again, very dependant on the output format.</br>
<img src="/img/blog/2011-07-13-vis-which-tech/star_half.png" class="inl_icon"/> Animation: dany desktop tools do a nice job at this.<br/>
</p>

- proprietary vector-based development environments such as Flash;

<p><img src="/img/blog/2011-07-13-vis-which-tech/flash.png" /></p>

- proprietary dev environments a.k.a. Flash: ticks a lot of boxes, but with iOS’ stubborn refusal to support Flash, there’s no need to exclude potential viewers before writing a line of code.

- open development environments such as canvas, DOM and VML embedded in HTML documents, such as Protovis:

<p><img src="/img/blog/2011-07-13-vis-which-tech/protovis.png" /></p>

- HTML: ticks all of the above. We can output static files via cron, or feed in realtime data with Javascript. It’s accessible for anyone that has a web browser - (just watch out for people still running IE 6). It’s programatically generated, so it repeatable. It’s interactive at a basic level with hyperlinks, and at an advanced level with event handling. It’s animatable via vector graphics using Canvas, SVG or manipulating page elements.

The main downside of HTML is a steeper learning curve. It requires some programming know-how; though this is not a bad thing to invest some time in anyhow. As we’ll see, there are a lot of tools that will make the learning curve a lot less steep.

To develop our HTML visualization won’t be quite as easy as plugging data into our desktop tool - but not that far off it, as we’ll soon learn. In the next post in the series, we’ll look at the knowledge and tools that will help us get our first HTML visualization off the ground. If you know very little about HTML but can drive a text editor, it’s not quite as hard as you might think.
