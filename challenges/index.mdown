---
layout: default
title:  CSIRT challenges
---
<p id="#toc">
    <ul>
        <li><a href="#filtering">Filtering</a></li>
        <li><a href="#repetition">Repetition</a></li>
        <li><a href="#special_environmental_constraints">Special environmental constraints</a></li>
        <li><a href="#response_and_development_are_different">Response and development are different</a></li>
        <li><a href="#built_for_the_needs_of_csirts">Built for the needs of CSIRTs</a></li>
    </ul>
</p>

What kinds of challenges do CSIRTs face that relate to process and software?

## Filtering <img src="/img/head_icons/filter.png" />

At some level, every incident response team is like a filter : taking data and reports in, processing and refining them, and then producing high-quality, verified information that goes out to your constituents and other teams.

Although this process is integral to CSIRTs, managing data can feel like doing your taxes: necessary, but painful. To be an effective security team, you need to be effective at processing your data. 

## Repetition <img src="/img/head_icons/arrow_cycle.png" />

While some incident reports are exciting and unique, the majority are not. The bulk of what CSIRTs handle is repetitive: malware infections, phishing sites, port scans.

One problem this leads to is burnout. You and your team want to investigate the new, interesting threats, not handle the same incidents every day. There's nothing that saps creativity and causes complacency among a sharp security team faster than repetition.

Using software, we can automate as much tedium as possible, leaving your team free to focus on the new and interesting.

## Special environmental constraints <img src="/img/head_icons/firewall.png" />

The most important asset you own as a CSIRT is your name and its reputation. You're careful to protect that asset by protecting the sensitive information you handle.

In contrast to the trend of creating software heavy with external web service dependencies, you want to know you can control, verify, and rely on your environment. Sometimes, you need to trust it to the point where it's not connected to any external networks at all.

This creates some software development issues that are challenging, and require some special understanding.

## Response and development are different <img src="/img/head_icons/alarm.png" />

Incident response involves waiting for unpredictable things to cause damage, then doing something.

Software development involves making a careful plan, then implementing that plan with intense bouts of concentration.

A software developer that's interrupted every ten minutes by an incident report is not effective. Your software developers need to understand the incident response process, without actually being subjected to the unpredictability of incident response itself. 

## Built for the needs of CSIRTs <img src="/img/head_icons/lock.png" />

What CSIRTs do is quite specialised: not everyone understands the mindset that security folks have. To ask someone to build a system for you, you need to explain CSIRT operations 101. How do phishing sites work, and what are the tell-tale signs that a site is fake? How do drive by downloads work? What protocols do botnet C&Cs often use?

Wouldn't it be good if your software developers already had this baseline of understanding?

We understand the software needs of IR teams, because we've had those same needs before.  Monitoring systems need to consider non-attribution. Dangerous artifacts like malware should be stored securely, where analysts can view information about them without accidentally executing them.  System access should be compartmentalised, using encryption or signing as appropriate.

Working with us lets you skip over those explanations about what CSIRTs do, and get down to the interesting parts of how we're going to solve problems.

<p><a href="/development">Next: how do we develop our software?</a></p>
